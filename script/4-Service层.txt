    // 发起请求
    public String requestData(Map params) throws Exception {
        String strURL = "";
        String method = "GET";
        final String key="";
        final String value="";
        // 添加自定义请求头，key 和 value 是你需要添加的头信息的键与值，如用于鉴权
        Map<String, String> headers = new HashMap<String, String>(){{
            put(key, value);
        }};
        return getResponseContent(strURL, method, headers, params);
    }

    // 依次查询
    public Data selectData(String id){
        return dataMapper.selectData(id);
    }

    // 批量查询
    public List<Data> batchSelectData(String ids){
        return dataMapper.batchSelectData(Arrays.asList(ids.split(",")));
    }

    // 分页查询
    public List<Data> pageSelectData(String ids){
        List<Data> dataList = new ArrayList<>();
        List<String> idList = Arrays.asList(ids.split(","));
        int idSize = idList.size();

        int pageSize = 12000/1; // pageSize 给定页面大小，页面大小为 12000/参数种类
        int pageNum = (idSize % pageSize == 0 ? idSize / pageSize : idSize / pageSize + 1); //页数向上取整

        int start, end;
        for(int i = 1; i <= pageNum; i++){
            start = (i - 1) * pageSize;
            if(i == pageNum) end = idSize;
            else end = i * pageSize;
            dataList.addAll(dataMapper.batchSelectData(idList.subList(start, end)));
        }
        return dataList;
    }

    // 依次插入
    public void insertData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataMapper.insertData(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));
           }
        }
        return ;
    }

    // 批量插入
    public void batchInsertData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        List<Data> dataList = new ArrayList<>();
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataList.add(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));           }
        }
        dataMapper.batchInsertData(dataList);
        return ;
    }

    // 分页插入
    public void pageInsertData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        int pageSize = 12000/Data.class.getDeclaredFields().length; // 页面大小，此处意为每次分页写入的数据量定在 12000
        int curSize = 0; // 当前大小，当达到页面大小后就重置为 0
        int cumSize = 0; // 累积大小，一直累积，不进行重置
        List<Data> dataList = new ArrayList<>();
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataList.add(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));
                curSize ++;
                cumSize ++;
                if(curSize == pageSize){
                    dataMapper.batchInsertData(dataList);
                    dataList.clear();
                    curSize = 0;
                }
            }
        }
        if(cumSize > 0) dataMapper.batchInsertData(dataList);
        return ;
    }

    // 依次更新
    public void updateData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataMapper.updateData(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));
           }
        }
        return ;
    }

    // 批量更新
    public void batchUpdateData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        List<Data> dataList = new ArrayList<>();
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataList.add(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));           }
        }
        dataMapper.batchUpdateData(dataList);
        return ;
    }

    // 分页更新
    public void pageUpdateData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        int pageSize = 12000/Data.class.getDeclaredFields().length; // 页面大小，此处意为每次分页写入的数据量定在 12000
        int curSize = 0; // 当前大小，当达到页面大小后就重置为 0
        int cumSize = 0; // 累积大小，一直累积，不进行重置
        List<Data> dataList = new ArrayList<>();
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataList.add(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));
                curSize ++;
                cumSize ++;
                if(curSize == pageSize){
                    dataMapper.batchUpdateData(dataList);
                    dataList.clear();
                    curSize = 0;
                }
            }
        }
        if(cumSize > 0) dataMapper.batchUpdateData(dataList);
        return ;
    }

    // 依次插入或更新
    public void insertOrUpdateData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataMapper.insertOrUpdateData(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));
           }
        }
        return ;
    }

    // 批量插入或更新
    public void batchInsertOrUpdateData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        List<Data> dataList = new ArrayList<>();
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataList.add(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));           }
        }
        dataMapper.batchInsertOrUpdateData(dataList);
        return ;
    }

    // 分页插入或更新
    public void pageInsertOrUpdateData() throws Exception {
        // 添加自定义参数，key 和 value 是你需要添加的参数名与参数值
        final String key="";
        final String value="";
        String jsonStr = requestData(new HashMap<String, String>() {{
            put(key, value);
        }});
        int pageSize = 12000/Data.class.getDeclaredFields().length; // 页面大小，此处意为每次分页写入的数据量定在 12000
        int curSize = 0; // 当前大小，当达到页面大小后就重置为 0
        int cumSize = 0; // 累积大小，一直累积，不进行重置
        List<Data> dataList = new ArrayList<>();
        JSONObject jsonObj = JSON.parseObject(jsonStr);// 将 JSON 字符串解析成 JSON 对象
        if (jsonObj != null){
            JSONArray jsonInfo = jsonObj.getJSONArray("data");//解析成 JSON 数组
            if (jsonInfo != null) for (int i = 0; i < jsonInfo.size(); i++) {// 遍历 JSON 数组依次取出 JSON 对象
                JSONObject jsonDetailInfo = jsonInfo.getJSONObject(i);
                dataList.add(new Data(
                    jsonDetailInfo.getString("id"),
                    jsonDetailInfo.getString("key1"),
                    jsonDetailInfo.getString("key2")
                ));
                curSize ++;
                cumSize ++;
                if(curSize == pageSize){
                    dataMapper.batchInsertOrUpdateData(dataList);
                    dataList.clear();
                    curSize = 0;
                }
            }
        }
        if(cumSize > 0) dataMapper.batchInsertOrUpdateData(dataList);
        return ;
    }

    // 依次删除
    public void deleteData(String id){
        dataMapper.deleteData(id);        return ;
    }

    // 批量删除
    public void batchDeleteData(String ids){
        dataMapper.batchDeleteData(Arrays.asList(ids.split(",")));
        return ;
    }

    // 依次删除
    public void pageDeleteData(String ids){
        List<String> idList = Arrays.asList(ids.split(","));
        int idSize = idList.size();

        int pageSize = 12000/1; // pageSize 给定页面大小，页面大小为 12000/参数种类
        int pageNum = (idSize % pageSize == 0 ? idSize / pageSize : idSize / pageSize + 1); //页数向上取整

        int start, end;
        for(int i = 1; i <= pageNum; i++){
            start = (i - 1) * pageSize;
            if(i == pageNum) end = idSize;
            else end = i * pageSize;
            dataMapper.DeleteData(idList.subList(start, end));
        }
        return ;
    }

    // 清空
   public void clearData(){
        dataMapper.clearData();
        return ;
    }